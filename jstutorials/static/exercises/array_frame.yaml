---
task: Print an array of strings in a frame
details: |
  <p><strong>Write a function that returns the contents of an array in a frame</strong></p>
  <p>Example:<p>

  <pre>
  console.log(frame(["Hello", "I am", "in", "a", "frame"]))
  </pre>

  <p>Output:</p>

  <pre>
  +-------+
  | Hello |
  | I am  |
  | in    |
  | a     |
  | frame |
  +-------+
  <pre>
hints:
  - hintContent: |
      <p>Repeat a string by using <code>String.prototype.repeat()</code></p>

      <pre>
      "l" + "ol".repeat(3);
      // returns "lololol"
      </pre>
    hintCost: 7
  - hintContent: |
      <p>Add padding by using <code>String.prototype.padEnd()</code></p>

      <pre>
      "My love".padEnd(10, ".");
      // returns "My love..."
      </pre>
    hintCost: 12
  - hintContent: |
      <p>Use <code>"\n"</code> to add a new line to a string</p>

      <pre>
      console.log("Multiple\nLines!");
      </pre>

      <p><strong>Output:</strong></p>

      <pre>
      Multiple
      Lines!
      </pre>
    hintCost: 16
  - hintContent: |
      <p>Here is one solution:</p>

      <pre>
      function longest(arr) {
        var len = 0;
        for (var i = 0; i < arr.length; i++) {
          len = Math.max(len, arr[i].length);
        }
        return len;
      }

      function frame(arr) {
        var length = longest(arr);
        var verticalBorder = "+" + "-".repeat(length + 2) + "+\n";
        var framed = verticalBorder;
        for (var i = 0; i < arr.length; i++) {
          framed += "| " + arr[i].padEnd(length) +  " |\n";
        }
        framed += verticalBorder;
        return framed;
      }
      </pre>
    hintCost: 45
html: ''
js: |
  function frame(arr) {
    // your code here
  }

  var A = ["Hello", "I am", "in", "a", "frame"];
  console.log(frame(A));
htmlReadOnly: false
jsReadOnly: false
secret: ''
test:
  setup: |
    frame = undefined;

    const TEST_ASSERT = (arg, expected, msg) => {
      try {
        if (frame(arg).trim() !== expected) {
          throw new Error();
        }
      } catch (e) {
        fail(msg || `Failed case: ${arg}`);
      }
    };
  run: |
    if (!frame) {
      fail('You must use the function "frame"');
    }

    let expected = '+--+\n+--+';
    TEST_ASSERT([], expected, 'Failed case: [] (Empty list)');

    expected = `
    +-------+
    | Hello |
    | I am  |
    | in    |
    | a     |
    | frame |
    +-------+
    `.trim();
    TEST_ASSERT(["Hello", "I am", "in", "a", "frame"], expected, 'Failed case: ["Hello", "I am", "in", "a", "frame"]');

    expected = `
    +---------+
    | The     |
    | last    |
    | line    |
    | is the  |
    | longest |
    +---------+
    `.trim();
    TEST_ASSERT(["The", "last", "line", "is the", "longest"], expected, 'Failed case: ["The", "last", "line", "is the", "longest"]');

    expected = `
    +------------------------------------+
    | supercalifragilisticexpialidocious |
    | Even though the sound of it        |
    | Is something quite atrocious       |
    +------------------------------------+
    `.trim();
    TEST_ASSERT(
      ["supercalifragilisticexpialidocious", "Even though the sound of it", "Is something quite atrocious"],
      expected, 
      'Failed case: ["supercalifragilisticexpialidocious", "Even though the sound of it", "Is something quite atrocious"]'
    );
  cleanup: ''
  has: []
  hasNot: []
  maxLines: 50
  errorThreshold: 3