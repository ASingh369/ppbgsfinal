---
task: Print an array of strings in a frame
details: |
  <p><strong>Write a function that returns the contents of an array in a frame</strong></p>
  <p>Input:<p>

  <pre>
  ["Hello", "I am", "in", "a", "frame"]
  </pre>

  <p>Output:</p>

  <pre>
  +-------+
  | Hello |
  | I am  |
  | in    |
  | a     |
  | frame |
  +-------+
  <pre>
hints:
  - hintContent: |
      <p>Repeat a string by using <code>repeat</code> from a string</p>

      <pre>
      "l" + "ol".repeat(3);
      // returns "lololol"
      </pre>
    hintCost: 1
  - hintContent: |
      <p>Add padding by using <code>padEnd</code></p>

      <pre>
      "My love".padEnd(10, '.');
      // returns "My love..."
      </pre>
    hintCost: 1
  - hintContent: |
      <p>Use <code>"\n"</code> to add a new line to a string</p>

      <pre>
      console.log("Multiple\nLines!");
      </pre>

      <p><strong>Output:</strong></p>

      <pre>
      Multiple
      Lines!
      </pre>
    hintCost: 1
  - hintContent: |
      <p>Here is one solution:</p>

      <pre>
      function longest(arr) {
        var len = 0;
        for (var i = 0; i < arr.length; i++) {
          len = Math.max(len, arr[i].length);
        }
        return len;
      }

      function pad(str, len) {
        while (str.length < len) {
          str += " ";
        }
        return str;
      }

      function frame(arr) {
        var length = longest(arr);
        var verticalBorder = "+" + "-".repeat(length + 2) + "+\n";
        var framed = verticalBorder;
        for (var i = 0; i < arr.length; i++) {
          framed += "| " + pad(arr[i], length) +  " |\n";
        }
        framed += verticalBorder;
        return framed;
      }
      </pre>
    hintCost: 1
html: ''
js: |
  function frame(arr) {
    // your code here
  }

  var A = ["Hello", "I am", "in", "a", "frame"];
  console.log(frame(A));
hintReadOnly: false
jsReadOnly: false
secret: ''
test:
  setup: frame = undefined;
  run: |
    if (!frame) {
      fail('You must use the function "frame"');
    }

    let expected = '+--+\n+--+';
    try {
      if (frame([]).trim() !== expected) {
        throw new Error();
      }
    } catch (e) {
      fail('Failed case: [] (Empty list)');
    }

    expected = '+-------+\n| Hello |\n| I am  |\n| in    |\n| a     |\n| frame |\n+-------+';
    try {
      if ((frame(["Hello", "I am", "in", "a", "frame"]) || '').trim() !== expected) {
        throw new Error();
      }
    } catch (e) {
      fail('Failed case: ["Hello", "I am", "in", "a", "frame"]');
    }

    expected = '+------------------------------------+\n| supercalifragilisticexpialidocious |\n| Even though the sound of it        |\n| Is something quite atrocious       |\n+------------------------------------+'
    try {
      if ((frame(["supercalifragilisticexpialidocious", "Even though the sound of it", "Is something quite atrocious"]) || '').trim() !== expected) {
        throw new Error();
      }
    } catch (e) {
      fail('Failed case: ["supercalifragilisticexpialidocious", "Even though the sound of it", "Is something quite atrocious"]');
    }
  cleanup: ''
  has: []
  hasNot: []
  maxLines: 50
  errorThreshold: 3